name: composed-mqtt-project

## ALL PORTS are decided by flowchart/port_flowchart.mmd
# The ip address is the service name, e.g., `broker` for the MQTT broker, `web-ui` for the web UI
# The docker has debug variables to print debug messages in the console

services:

  ### MQTT Broker Service
  broker:
    image: eclipse-mosquitto:2.0.21
    container_name: my-mosquitto-broker-container
    restart: always
    ports:
      - "1883:1883"
    volumes:
      - ./mqtt-broker/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mqtt-broker/data:/mosquitto/data
      - ./mqtt-broker/log:/mosquitto/log
    networks:
      - iot_network

  ### ST Printer Services
  st-printer-1:
    build:
      context: ./st_printer
    container_name: st-printer-1-container
    restart: always
    ports:
      - "8130:8130"
    volumes:
      - ./st_printer/target_printer_mqtt_config.yaml:/app/printer_mqtt_config.yaml
    environment:
      - PRINTER_ID=printer-1
      - DEBUG=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    depends_on:
      - broker

  st-printer-2:
    build:
      context: ./st_printer
    container_name: st-printer-2-container
    restart: always
    ports:
      - "8131:8130"
    volumes:
      - ./st_printer/target_printer_mqtt_config.yaml:/app/printer_mqtt_config.yaml
    environment:
      - PRINTER_ID=printer-2
      - DEBUG=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    depends_on:
      - broker

  st-printer-3:
    build:
      context: ./st_printer
    container_name: st-printer-3-container
    restart: always
    ports:
      - "8132:8130"
    volumes:
      - ./st_printer/target_printer_mqtt_config.yaml:/app/printer_mqtt_config.yaml
    environment:
      - PRINTER_ID=printer-3
      - DEBUG=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    depends_on:
      - broker

  ### Web UI Service
  web-ui:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
    container_name: web-ui-container
    ports:
      - "8000:8000"
    volumes:
      - ./web-ui/target_web_conf.yaml:/app/web_conf.yaml
    environment:
      - DEBUG=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - api-gateway

  ### Global Temperature Service
  global-temperature:
    build:
      context: ./global_temperature
      dockerfile: Dockerfile
    container_name: global-temperature-container
    ports:
      - "8100:8100"
    volumes:
      - ./global_temperature/target_mqtt_config.yaml:/app/mqtt_config.yaml
      - ./global_temperature/target_web_conf.yaml:/app/web_config.yaml
      - ./global_temperature/app/persistence/save:/app/persistence/save
    environment:
      - timer_hear=61
      - DEBUG=False
      - DEBUG_COMMUNICATION=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker
      - api-gateway

  ### Anomaly Detection Service
  anomaly-detection:
    build:
      context: ./anomaly_detection
      dockerfile: Dockerfile
    container_name: anomaly_detection-container
    ports:
      - "8140:8140"
    volumes:
      - ./anomaly_detection/target_mqtt_config.yaml:/app/mqtt_config.yaml
      - ./anomaly_detection/app/persistence/save:/app/persistence/save
    networks:
      - iot_network
    environment:
      - timer_hear=61
      - DEBUG=False
      - DEBUG_COMMUNICATION=True
      - DEBUG_ALERTS=True
      - DEBUG_ANALYSIS=False
      - TZ=Europe/Berlin
    restart: always
    depends_on:
      - broker
      - api-gateway

  ### API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-container
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway/config:/app/config
      - ./api-gateway/logs:/app/logs
    environment:
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: unless-stopped

  ### Robot Service
  robot:
    build:
      context: ./robot
      dockerfile: Dockerfile
    container_name: robot-container
    volumes:
      - ./robot/app/config.yaml:/app/app/config.yaml
      - ./robot/logs:/app/logs
    environment:
      - ROBOT_ID=rob-1
      - MQTT_BROKER_HOST=broker
      - MQTT_BROKER_PORT=1883
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker

  ### Robot Management Service
  robot-management:
    build:
      context: ./robot_management
      dockerfile: Dockerfile
    container_name: robot-management-container
    ports:
      - "8120:8120"
    volumes:
      - ./robot_management/app/config.yaml:/app/app/config.yaml
      - ./robot_management/logs:/app/logs
    environment:
      - CONFIG_PATH=/app/app/config.yaml
      - MQTT_BROKER_HOST=broker
      - MQTT_BROKER_PORT=1883
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker
      - robot

### Printer Monitoring Service

  printer-monitoring:
    build:
      context: ./printer_monitoring
      dockerfile: Dockerfile
    container_name: printer_monitoring-container
    ports:
      - "8110:8110"
    volumes:
      - ./printer_monitoring/target_mqtt_config.yaml:/app/mqtt_config.yaml
      - ./printer_monitoring/target_web_conf.yaml:/app/web_config.yaml
      - ./printer_monitoring/app/persistence/save:/app/persistence/save
    networks:
      - iot_network
    environment:
      - timer_hear=61
      - DEBUG=False
      - DEBUG_COMMUNICATION=True
      - TZ=Europe/Berlin
    restart: always
    depends_on:
      - broker
      - api-gateway

### Fan Controller Service

  fan-controller:
    build:
      context: ./fan_controller
      dockerfile: Dockerfile
    container_name: fan-controller-container
    ports:
      - "8150:8150"
    volumes:
      - ./fan_controller/config.yaml:/app/fan_controller_config.yaml
    environment:
      - CONFIG_PATH=/app/fan_controller_config.yaml
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker

### Priority Queue Manager Service

  priority-queue-manager:
    build:
      context: ./priority_queue_manager
      dockerfile: Dockerfile
    container_name: priority-queue-manager-container
    ports:
      - "8090:8090"
    volumes:
      - ./priority_queue_manager/data:/app/data
    environment:
      - CONFIG_PATH=/app/config/priority_queue_config.yaml
      - DEBUG=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker
      - api-gateway


### Job Handler Service

  job-handler:
    build:
      context: ./job_handler
      dockerfile: Dockerfile
    container_name: job-handler-container
    ports:
      - "8115:8115"
    volumes:
      - ./job_handler/config.yaml:/app/job_handler_config.yaml
    environment:
      - CONFIG_PATH=/app/job_handler_config.yaml
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker
      - api-gateway
      - priority-queue-manager


  ### Fan Unit Service
  fan-unit:
    build:
      context: ./fan_unit
      dockerfile: Dockerfile
    container_name: fan-unit-container
    volumes:
      - ./fan_controller/config/fan_controller_config.yaml:/app/fan_controller_config.yaml
    environment:
      - FAN_ID=fan1
      - DEBUG=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker

  ### Room Temperature Sensor Service
  room-temperature-sensor:
    build:
      context: ./room_temperature_sensor
      dockerfile: Dockerfile
    container_name: room-temperature-sensor-container
    volumes:
      - ./room_temperature_sensor/config:/app/config
    environment:
      - DEBUG=True
      - TZ=Europe/Berlin
    networks:
      - iot_network
    restart: always
    depends_on:
      - broker

networks:
  iot_network:
    driver: bridge



